from aiogram import F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.types.input_file import FSInputFile
from aiogram.filters import CommandStart, Command

import keyboards as kb
import commands as cm


router = Router()


@router.message(CommandStart())
async def start(message: Message):
    cm.upsert_report('start')
    
    await message.answer('–ü—Ä–∏–≤–µ—Ç, –ø—Ä–∏–≤–µ—Ç! –†–∞–¥–∞ —Ç–µ–±—è –≤–∏–¥–µ—Ç—å –∑–¥–µ—Å—å!üòáü©µ\n\n–ï–∂–µ–¥–Ω–µ–≤–Ω–æ –Ω–∞—à–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞—è–≤–æ–∫, –ø–æ—ç—Ç–æ–º—É —è –∑–¥–µ—Å—å, —á—Ç–æ–±—ã –ø–æ–º–æ—á—å –í–∞–º –±—ã—Å—Ç—Ä–µ–µ –Ω–∞–π—Ç–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã ‚ò∫Ô∏è\n\n–°–Ω–∏–∑—É –≤—ã –Ω–∞–π–¥–µ—Ç–µ –º–µ–Ω—é. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ–º—É –∏ –Ω–∞—á–Ω–µ–º! üëç', reply_markup=kb.helper)
    

@router.message(F.text == '–û—Ç–º–µ–Ω–∞')
async def cancel_action(message: Message):
    user = message.from_user.id
    cm.reset_state(user)
    await message.answer('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ', reply_markup=kb.helper)


@router.message(Command('help'))
async def reply_help(message: Message):
    await message.answer('–ú–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=kb.helper)


@router.message(F.photo)
async def handle_photo(message: Message):
    await message.answer('–Ø –Ω–µ –º–æ–≥—É –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫–∏...\n–õ—É—á—à–µ –≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω–æ –∏–∑ –¥–µ–π—Å—Ç–≤–∏–π', reply_markup=kb.helper)


### –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ–º–æ—Ñ–æ–Ω
@router.message(F.text == '–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–º–Ω—ã–π –¥–æ–º–æ—Ñ–æ–Ω?')
async def connect_intercom(message: Message):
    cm.upsert_report('how_connect')
    
    await message.answer('–ë–ª–∞–≥–æ–¥–∞—Ä—é –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –º–æ–µ–º—É –¥–æ–º—É, —ç—Ç–æ —Ö–æ—Ä–æ—à–∞—è –∏–Ω–≤–µ—Å—Ç–∏—Ü–∏—è –≤ —Å–≤–æ–π –∫–æ–º—Ñ–æ—Ä—Ç üòäüëç\n\n–ß—Ç–æ–±—ã –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ–º–æ—Ñ–æ–Ω, –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –î–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤. –ì–æ—Ç–æ–≤—ã?', reply_markup=kb.inl_connection)


### –û –∫–æ–º–ø–∞–Ω–∏–∏
@router.message(F.text == '–û –∫–æ–º–ø–∞–Ω–∏–∏')
async def connect_intercom(message: Message):
    cm.upsert_report('about_us')
    
    path_to_image = '/home/asan/MyProject/IntercomBot/photo/about_us.jpg'
    photo = FSInputFile(path_to_image)
    
    text = '–ò–Ω—Ç–µ—Ä–∫–æ–º - —ç—Ç–æ –æ—Ç–µ—á–µ—Å—Ç–≤–µ–Ω–Ω–∞—è –∫–æ–º–ø–∞–Ω–∏—è, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —É—Å–ª—É–≥–∏ –£–º–Ω–æ–π –¥–æ–º–æ—Ñ–æ–Ω–∏–∏ —Å 2023 –≥–æ–¥–∞. ‚ú®\n\n–ú—ã —Å—Ç—Ä–µ–º–∏–º—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–∏—Ç—å –±–æ–ª—å—à–µ –∫–æ–º—Ñ–æ—Ä—Ç–∞ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∂–∏—Ç–µ–ª—è–º –º–Ω–æ–≥–æ—ç—Ç–∞–∂–Ω—ã—Ö –¥–æ–º–æ–≤, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã –¥–æ–º–æ—Ñ–æ–Ω–æ–≤ —Å –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –¢–∞–∫–∏–º –æ–±—Ä–∞–∑–æ–º –º—ã –¥–µ–ª–∞–µ–º –±–µ–∑–æ–ø–∞—Å–Ω—ã–º–∏ –Ω–µ —Ç–æ–ª—å–∫–æ –¥–æ–º–∞, –Ω–æ –∏ –≥–æ—Ä–æ–¥ –≤ —Ü–µ–ª–æ–º. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞—à–∞ –±–∞–∑–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –∞–±–æ–Ω–µ–Ω—Ç–æ–≤ —Å–æ—Å—Ç–∞–≤–ª—è–µ—Ç –±–æ–ª–µ–µ 2000 —á–µ–ª–æ–≤–µ–∫.\n\nüïí –ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n–æ–Ω–ª–∞–π–Ω —Å 9:00 –¥–æ 20:00 (–ü–Ω - –ü—Ç)\n–æ—Ñ–∏—Å —Å 9:00 –¥–æ 18:00 (–ü–Ω-–ü—Ç)\n\nüìû –ö–æ–ª–ª-—Ü–µ–Ω—Ç—Ä:\n0707888822\n0997888822\n\nüìç –ê–¥—Ä–µ—Å:\n—É–ª. –§—Ä—É–Ω–∑–µ, 533–ê (–ë–∏—à–∫–µ–∫)'
    await message.answer_photo(text, reply_markup=kb.inl_about_us, photo=photo)
    

### –ö—Ç–æ —Ç–∞–∫–∞—è –°–∏—é?
@router.message(F.text == '–ö—Ç–æ —Ç–∞–∫–∞—è –°–∏—é?')
async def who_im(message: Message):
    cm.upsert_report('who_im')
    
    path_to_image = '/home/asan/MyProject/IntercomBot/photo/seeu.jpg'
    photo = FSInputFile(path_to_image)
    
    text = '–°–∏—é - –º–∞—Å–∫–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –ò–Ω—Ç–µ—Ä–∫–æ–º. –≠—Ç–æ –≥–ª–∞–∑–æ–∫ –∫–∞–º–µ—Ä—ã –¥–æ–º–æ—Ñ–æ–Ω–∞. –°–∏—é –≤ –ø–µ—Ä–µ–≤–æ–¥–µ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ "See You" –æ–∑–Ω–∞—á–∞–µ—Ç "–Ø —Ç–µ–±—è –≤–∏–∂—É". –ü–µ—Ä—Å–æ–Ω–∞–∂ –æ—Ö—Ä–∞–Ω—è–µ—Ç –∂–∏—Ç–µ–ª–µ–π –¥–æ–º–∞ –æ—Ç –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏—Ö, —Å–ª–µ–¥–∏—Ç –∑–∞ –ø–æ—Ä—è–¥–∫–æ–º –∏ –∑–∞–±–æ—Ç–∏—Ç—Å—è –æ —Å–∏—Å—Ç–µ–º–µ.'
    await message.answer_photo(photo, text)


### –ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –¥–æ–º–æ—Ñ–æ–Ω
@router.message(F.text == '–ì–¥–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á?')
async def where_ibuy(message: Message):
    cm.upsert_report('where_buy')
    
    text = '–ö–ª—é—á –º–æ–∂–Ω–æ –ø—Ä–µ–æ–±—Ä–µ—Å—Ç–∏ —É –¥–æ–º–∫–æ–º–∞ –∏–ª–∏ —É –Ω–∞—Å –≤ –æ—Ñ–∏—Å–µ.\n\n–¢–µ–ª–µ—Ñ–æ–Ω—ã –¥–ª—è —Å–ø—Ä–∞–≤–æ–∫:\n0707888822\n0997888822\n\n–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã:\n9:00 - 18:00 —Å –ü–Ω –ø–æ –ü—Ç\n\n–ê–¥—Ä–µ—Å: —É–ª.–§—Ä—É–Ω–∑–µ, 533–∞ (–ë–∏—à–∫–µ–∫)'
    await message.answer(text, reply_markup=kb.inl_where_ibuy)


@router.callback_query(F.data == 'report')
async def handle_report(callback: CallbackQuery):
    user = callback.from_user.id
    cm.upsert_user_state(user, 1)

    await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å.')

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.bot.send_message(user, '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?', reply_markup=kb.cancel)


@router.message(lambda message: cm.get_user_state(message.from_user.id)[0] == 1)
async def handle_name(message: Message):
    user = message.from_user.id
    text = message.text

    cm.upsert_ticket(user, 'name', text)
    cm.upsert_user_state(user, 2)

    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å', reply_markup=kb.cancel)


@router.message(lambda message: cm.get_user_state(message.from_user.id)[0] == 2)
async def handle_address(message: Message):
    user = message.from_user.id
    text = message.text
    cm.upsert_ticket(user, 'address', text)
    cm.upsert_user_state(user, 3)

    await message.answer('–í –í–∞—à–µ–º –¥–æ–º–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ–º–æ—Ñ–æ–Ω?', reply_markup=kb.inl_inter)


### Have u intercom
@router.callback_query(F.data == 'yes_we_have')
async def yes_we_have(callback: CallbackQuery):
    user = callback.from_user.id
    
    cm.upsert_ticket(user, 'inter_type', '–î–∞, —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    cm.upsert_user_state(user, 4)

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.bot.send_message(user, '–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?', reply_markup=kb.inl_connection_type)
    

@router.callback_query(F.data == 'no_we_havent')
async def no_we_havent(callback: CallbackQuery):
    user = callback.from_user.id
    
    cm.upsert_ticket(user, 'inter_type', '–ù–µ—Ç, –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω')
    cm.upsert_user_state(user, 4)

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.bot.send_message(user, '–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?', reply_markup=kb.inl_connection_type)
    

@router.callback_query(F.data == 'house')
async def house(callback: CallbackQuery):
    user = callback.from_user.id
    
    cm.upsert_ticket(user, 'inter_type', '–ß–∞—Å—Ç–Ω—ã–π –¥–æ–º')
    cm.upsert_user_state(user, 4)

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.bot.send_message(user, '–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?', reply_markup=kb.inl_connection_type)


### Contact type
@router.callback_query(F.data == 'whats')
async def whats(callback: CallbackQuery):
    user = callback.from_user.id
    
    cm.upsert_ticket(user, 'callback_type', '–ù–∞–ø–∏—Å–∞—Ç—å –≤ What\'s App')
    cm.upsert_user_state(user, 5)

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.bot.send_message(user, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', reply_markup=kb.cancel)


@router.callback_query(F.data == 'mobile')
async def whats(callback: CallbackQuery):
    user = callback.from_user.id
    
    cm.upsert_ticket(user, 'callback_type', '–ü–æ–∑–≤–æ–Ω–∏—Ç—å')
    cm.upsert_user_state(user, 5)

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.bot.send_message(user, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', reply_markup=kb.cancel)


@router.message(lambda message: cm.get_user_state(message.from_user.id)[0] == 5)
async def handle_phone(message: Message):
    user = message.from_user.id
    text = message.text
    cm.upsert_ticket(user, 'num', text)
    cm.upsert_user_state(user, 6)

    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.', reply_markup=kb.cancel)


@router.message(lambda message: cm.get_user_state(message.from_user.id)[0] == 6)
async def handle_description(message: Message):
    user = message.from_user.id
    text = message.text
    cm.upsert_ticket(user, 'description', text)
    cm.reset_state(user)

    get_data = cm.get_ticket(user)
    date = message.date.today().strftime("%Y-%m-%d %H:%M")

    await message.bot.send_message(
        -1002009533675,
        f'–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}. –í—Ä–µ–º—è: {date}\
        \n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?ü§ó\n–û—Ç–≤–µ—Ç: {get_data[1]}\
        \n\n–í–æ–ø—Ä–æ—Å: –ù–∞ –í–∞—à–µ–º –¥–æ–º–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–æ–º–æ—Ñ–æ–Ω?\n–û—Ç–≤–µ—Ç: {get_data[6]}\
        \n\n–í–æ–ø—Ä–æ—Å: –ü–æ –∫–∞–∫–æ–º—É –∞–¥—Ä–µ—Å—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–º–æ—Ñ–æ–Ω, –ª–∏–±–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–æ–º–æ—Ñ–æ–Ω–∞?\n–û—Ç–≤–µ—Ç: {get_data[2]}\
        \n\n–í–æ–ø—Ä–æ—Å: –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏\n–û—Ç–≤–µ—Ç: {get_data[3]}\
        \n\n–í–æ–ø—Ä–æ—Å: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏ üôÉ\n–û—Ç–≤–µ—Ç: {get_data[5]}\
        \n\n–í–æ–ø—Ä–æ—Å: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π.\n–û—Ç–≤–µ—Ç: {get_data[4]}'
    )

    await message.answer('–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°—Ä–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ - 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è.\n\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–µ–π! ü§©üëåüòâü©µ', reply_markup=kb.helper)


### –†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É–º–µ–µ—Ç —É–º–Ω—ã–π –¥–æ–º–æ—Ñ–æ–Ω
@router.message(F.text == '–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É–º–µ–µ—Ç —É–º–Ω—ã–π –¥–æ–º–æ—Ñ–æ–Ω')
async def about_intercom(message: Message):
    cm.upsert_report('tell_about')
    
    path_to_image = '/home/asan/MyProject/IntercomBot/photo/1.jpg'
    photo = FSInputFile(path_to_image)
    
    text = '–ù–∞—à –¥–æ–º–æ—Ñ–æ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ –≤–º–µ—Å—Ç–µ —Å –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏–µ–º –∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º. –ö–∞–º–µ—Ä—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—Ç—Å—è –≤–æ –¥–≤–æ—Ä–µ, –≤ –ø–æ–¥—ä–µ–∑–¥–µ, –Ω–∞ –ø–∞—Ä–∫–æ–≤–∫–µ, –Ω–∞ –¥–µ—Ç—Å–∫–æ–π –ø–ª–æ—â–∞–¥–∫–µ –∏ –≤ –ª—é–±–æ–º –¥—Ä—É–≥–æ–º –º–µ—Å—Ç–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∂–∏—Ç–µ–ª–µ–π. üòâ\n\n–£ –≤–∞—Å –µ—Å—Ç—å –ª–∏—á–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç, –¥–µ—Ç–∏, –ø–æ–∂–∏–ª—ã–µ —á–ª–µ–Ω—ã —Å–µ–º—å–∏ –∏–ª–∏ —Ü–µ–Ω–Ω—ã–µ –≤–µ—â–∏ –≤ –¥–æ–º–µ?'

    await message.answer_photo(photo, text, reply_markup=kb.inl_about)


@router.callback_query(F.data == 'ihave')    
async def ihave(callback: CallbackQuery):
    user = callback.from_user.id
    path_to_image = '/home/asan/MyProject/IntercomBot/photo/2.jpg'
    photo = FSInputFile(path_to_image)
    
    text = '–ü—Ä—è–º–∞—è —Ç—Ä–∞–Ω—Å–ª—è—Ü–∏—è —Å–æ –≤—Å–µ—Ö –∫–∞–º–µ—Ä –¥–æ—Å—Ç—É–ø–Ω–∞ —á–µ—Ä–µ–∑ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ. –í—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç —Å–º–æ–∂–µ—Ç–µ —É–±–µ–¥–∏—Ç—å—Å—è –≤ —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å, —Å –∫–µ–º –∏–≥—Ä–∞–µ—Ç –≤–∞—à —Ä–µ–±–µ–Ω–æ–∫, –∏ –±—ã—Ç—å —É–≤–µ—Ä–µ–Ω–Ω—ã–º–∏, —á—Ç–æ –≤ —Å–ª—É—á–∞–µ –Ω–µ–ø—Ä–∏—è—Ç–Ω–æ–π —Å–∏—Ç—É–∞—Ü–∏–∏ —É –≤–∞—Å –±—É–¥–µ—Ç –∑–∞–ø–∏—Å—å —Å –∫–∞–º–µ—Ä. üëç\n\n‚ÄºÔ∏è –ö—Å—Ç–∞—Ç–∏, –∑–∞–ø–∏—Å–∏ —Ö—Ä–∞–Ω—è—Ç—Å—è –≤ –æ–±–ª–∞—á–Ω–æ–º –∞—Ä—Ö–∏–≤–µ 5 –¥–Ω–µ–π, –∞ –∑–∞—Ç–µ–º —É–¥–∞–ª—è—é—Ç—Å—è. –ù–æ –µ—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–ø–∏—Å–∏, –∏—Ö –º–æ–∂–Ω–æ —Å –ª–µ–≥–∫–æ—Å—Ç—å—é —Å–∫–∞—á–∞—Ç—å –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω. üí´'    

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.bot.send_photo(user, caption=text, reply_markup=kb.inl_letsgo, photo=photo)
    

@router.callback_query(F.data == 'gonext')
async def gonext(callback: CallbackQuery):
    user = callback.from_user.id
    
    text = '–ö–∞–º–µ—Ä–∞ –¥–æ–º–æ—Ñ–æ–Ω–∞ –æ—Å–Ω–∞—â–µ–Ω–∞ –¥–∞—Ç—á–∏–∫–∞–º–∏, –±–ª–∞–≥–æ–¥–∞—Ä—è –∫–æ—Ç–æ—Ä—ã–º –æ–Ω–∞ –º–æ–∂–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –ª–∏—Ü–∞ –∏ –æ—Ç–ª–∏—á–∞—Ç—å –∂–∏–≤—ã—Ö –ª—é–¥–µ–π –æ—Ç —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. üòÆ\n\n–ö–∞–º–µ—Ä–∞ —Ç–∞–∫–∂–µ –æ–±–ª–∞–¥–∞–µ—Ç —Å–≤–µ—Ä—Ö—Å–≤–µ—Ç–æ—á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ–π –º–∞—Ç—Ä–∏—Ü–µ–π, —á—Ç–æ –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ç—Ä–∞–Ω—Å–ª–∏—Ä–æ–≤–∞—Ç—å —Ü–≤–µ—Ç–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–∂–µ –≤ –Ω–æ—á–Ω–æ–µ –≤—Ä–µ–º—è —Å—É—Ç–æ–∫. üòÄüëç\n\n–ú—ã –∂–∏–≤–µ–º –≤ —Ç–∞–∫–æ–µ –≤—Ä–µ–º—è, –∫–æ–≥–¥–∞ –Ω–µ —Å—Ç—Ä–∞—à–Ω–æ –∑–∞–±—ã—Ç—å –∫–æ—à–µ–ª–µ–∫ —Å –¥–µ–Ω—å–≥–∞–º–∏, –≤–µ–¥—å –º–æ–∂–Ω–æ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏, –∏–ª–∏ –∑–∞–±—ã—Ç—å –∫–ª—é—á–∏, –≤–µ–¥—å –¥–≤–µ—Ä—å –º–æ–∂–Ω–æ –æ—Ç–∫—Ä—ã—Ç—å –ø–æ Face ID –∏ –Ω–µ —Ç–æ–ª—å–∫–æ.'
    
    await callback.message.edit_reply_markup(None)
    await callback.bot.send_message(user, caption=text, reply_markup=kb.inl_without)
    

@router.callback_query(F.data == 'without_key')
async def whats_this(callback: CallbackQuery):
    user = callback.from_user.id
    path_to_image = '/home/asan/MyProject/IntercomBot/photo/3.jpg'
    photo = FSInputFile(path_to_image)
    
    text = '‚úÖ 3 —Å–ø–æ—Å–æ–±–∞ –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å –±–µ–∑ –∫–ª—é—á–∞:\n\n\n\n1. –ü–æ —Ñ—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü;\n2. –ß–µ—Ä–µ–∑ –æ–Ω–ª–∞–π–Ω –∫–ª—é—á –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏;\n3. –†–∞–∑–¥–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –ø–æ —Å—Å—ã–ª–∫–µ.\n\n\n–∏ —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –ª–∞–π—Ñ—Ö–∞–∫ –æ—Ç –Ω–∞—à–∏—Ö –∞–±–±–æ–Ω–µ–Ω—Ç–æ–≤üí£:\n\n\n–ø–æ–∑–≤–æ–Ω–∏—Ç—å —Å–µ–±–µ —Å –¥–æ–º–æ—Ñ–æ–Ω–∞ –∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å —á–µ—Ä–µ–∑ —Ç–µ–ª–µ—Ñ–æ–Ω.'
    
    await callback.message.edit_reply_markup(None)
    await callback.bot.send_photo(user, caption=text, reply_markup=kb.inl_keys, photo=photo)
    

@router.callback_query(F.data == 'online_key')
async def whats_this(callback: CallbackQuery):
    user = callback.from_user.id
    path_to_image = '/home/asan/MyProject/IntercomBot/photo/4.jpg'
    photo = FSInputFile(path_to_image)
    
    text = 'üîë –û–Ω–ª–∞–π–Ω-–∫–ª—é—á ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–∫—Ä—ã–≤–∞—Ç—å –¥–≤–µ—Ä—å –∫–Ω–æ–ø–∫–æ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.'
    
    await callback.message.edit_reply_markup(None)
    await callback.bot.send_photo(user, caption=text, reply_markup=kb.inl_keys_ex, photo=photo)


@router.callback_query(F.data == 'time_key')
async def time_key(callback: CallbackQuery):
    user = callback.from_user.id
    path_to_image = '/home/asan/MyProject/IntercomBot/photo/4.jpg'
    photo = FSInputFile(path_to_image)
    
    text = 'üïê –í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø ‚Äî —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ—Å—Ç—É–ø –¥—Ä—É–∑—å—è–º –∏ –±–ª–∏–∑–∫–∏–º. –í—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π –≤ –ª—é–±–æ–π —Å–æ—Ü—Å–µ—Ç–∏ (WhatsApp, Instagram, Telegram –∏ —Ç. –¥.). –í–∞—à–∏–º –≥–æ—Å—Ç—è–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ª–∏—à—å –ø–µ—Ä–µ–π—Ç–∏ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –æ—Ç–∫—Ä—ã—Ç—å –¥–≤–µ—Ä—å. –£–¥–æ–±–Ω–æ, –∫–æ–≥–¥–∞ –∂–¥–µ—Ç–µ –≥–æ—Å—Ç–µ–π –∏ –Ω–µ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–≤–ª–µ–∫–∞—Ç—å—Å—è –Ω–∞ –¥–≤–µ—Ä—å.\n\n–í—Ä–µ–º–µ–Ω–Ω—ã–π –¥–æ—Å—Ç—É–ø –º–æ–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞ 2, 4, 8, 12 –∏–ª–∏ 24 —á–∞—Å–∞.'
    
    await callback.message.edit_reply_markup(None)
    await callback.bot.send_photo(user, caption=text, reply_markup=kb.inl_keys_ex, photo=photo)


@router.callback_query(F.data == 'keys_ex')
async def keys_ex(callback: CallbackQuery):
    user = callback.from_user.id
    path_to_image = '/home/asan/MyProject/IntercomBot/photo/5.jpg'
    photo = FSInputFile(path_to_image)
    
    text = '–ö–æ–Ω–µ—á–Ω–æ, –µ—Å—Ç—å! –î–ª—è –ª—é–±–∏—Ç–µ–ª–µ–π —Ç—Ä–∞–¥–∏—Ü–∏–æ–Ω–Ω—ã—Ö –¥–æ–º–æ—Ñ–æ–Ω–æ–≤ –∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∏—Å—Ç–æ–≤ —É –Ω–∞—Å –µ—Å—Ç—å –Ω–µ–∫–æ–ø–∏—Ä—É–µ–º—ã–µ –∫–ª—é—á–∏. –ö–ª—é—á–∏ –∏–º–µ—é—Ç —Å–≤–æ–π –ª–∏—á–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏ –∑–∞—â–∏—â–µ–Ω—ã —Å–∏—Å—Ç–µ–º–æ–π —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è. –ò—Ö –Ω–µ —Ç–∞–∫ –ø—Ä–æ—Å—Ç–æ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –≤ –ø–æ–¥–∑–µ–º–∫–µ, —á—Ç–æ —É—Å–ª–æ–∂–Ω—è–µ—Ç –¥–æ—Å—Ç—É–ø –≤ –ø–æ–¥—ä–µ–∑–¥ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–∏–º. üòå'
    
    await callback.message.edit_reply_markup(None)
    await callback.bot.send_photo(user, caption=text, reply_markup=kb.inl_how_work, photo=photo)
    

@router.callback_query(F.data == 'how_work')
async def how_work(callback: CallbackQuery):
    user = callback.from_user.id
    
    text = '–û—Ç–ª–∏—á–Ω—ã–π –≤–æ–ø—Ä–æ—Å! –î–∞–≤–∞–π—Ç–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –≤—ã –ø–æ–¥–∫–ª—é—á–µ–Ω—ã –∫ —Å–∏—Å—Ç–µ–º–µ –∏ –∫ –≤–∞–º –ø—Ä–∏—à–µ–ª –≥–æ—Å—Ç—åüòß. –û–Ω –Ω–∞–±–∏—Ä–∞–µ—Ç –Ω–æ–º–µ—Ä –∫–≤–∞—Ä—Ç–∏—Ä—ã –Ω–∞ –≤–∞—à–µ–º –¥–æ–º–æ—Ñ–æ–Ω–µ –∏ –∂–¥–µ—Ç –æ—Ç–≤–µ—Ç–∞. –ó–≤–æ–Ω–æ–∫ –ø–æ—Å—Ç—É–ø–∞–µ—Ç –Ω–∞ –≤–∞—à —Ç–µ–ª–µ—Ñ–æ–Ω –≤ –≤–∏–¥–µ –≤–∏–¥–µ–æ–∑–≤–æ–Ω–∫–∞. –í —ç—Ç–æ –≤—Ä–µ–º—è –≤—ã –Ω—è–Ω—á–∏—Ç–µ—Å—å —Å –º–∞–ª–µ–Ω—å–∫–∏–º –º–∞–ª—ã—à–æ–º –∏–ª–∏ –≥–æ—Ç–æ–≤–∏—Ç–µ –æ–±–µ–¥ (–∞ –º–æ–∂–µ—Ç –∏ —Ç–æ, –∏ –¥—Ä—É–≥–æ–µ –≤–º–µ—Å—Ç–µ). –í—Å–µ, —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å, ‚Äî —ç—Ç–æ –ø—Ä–∏–Ω—è—Ç—å –≤—ã–∑–æ–≤. –î–∞–ª–µ–µ –≤—ã –º–æ–∂–µ—Ç–µ —É–≤–∏–¥–µ—Ç—å, –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å, –∞ –∑–∞—Ç–µ–º —Ä–µ—à–∏—Ç—å, –≤–ø—É—Å—Ç–∏—Ç—å –≥–æ—Å—Ç—è –∏–ª–∏ –Ω–µ—Ç. ü§óüëç\n\n–ë–æ–ª–µ–µ —Ç–æ–≥–æ, –∑–≤–æ–Ω–∫–∏ –º–æ–∂–Ω–æ –ø—Ä–∏–Ω–∏–º–∞—Ç—å, –¥–∞–∂–µ –µ—Å–ª–∏ –≤–∞—Å –Ω–µ—Ç –¥–æ–º–∞ –∏ –¥–∞–∂–µ –µ—Å–ª–∏ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –¥—Ä—É–≥–æ–π —Å—Ç—Ä–∞–Ω–µ. –£–¥–æ–±–Ω–æ?üòè'
    
    await callback.message.edit_reply_markup(None)
    await callback.bot.send_message(user, caption=text, reply_markup=kb.inl_what_if)
    
    
@router.callback_query(F.data == 'good')
async def good(callback: CallbackQuery):
    user = callback.from_user.id
    
    text = '–í —Å–ª—É—á–∞–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –¥–æ–º–æ—Ñ–æ–Ω–∞ –≤–∞–º –Ω–µ –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –∏ –∏—Å–∫–∞—Ç—å —Ç–µ—Ö–Ω–∏–∫–∞, –∫–æ—Ç–æ—Ä—ã–π —Å–º–æ–∂–µ—Ç –µ–≥–æ –ø–æ—á–∏–Ω–∏—Ç—å. –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–∏—Ç—å –Ω–∞–º –æ –ø—Ä–æ–±–ª–µ–º–µ, –º—ã –ø—Ä–æ–≤–µ–¥–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É –∏ –ø—Ä–∏–≤–µ–¥–µ–º –¥–æ–º–æ—Ñ–æ–Ω –≤ –∏—Å–ø—Ä–∞–≤–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µüòâ. –í —Å–ª—É—á–∞–µ –ø–æ–ª–æ–º–∫–∏ –ø–æ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ø—Ä–∏—á–∏–Ω–∞–º –º—ã –∑–∞–º–µ–Ω–∏–º –µ–≥–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ.'
    
    await callback.message.edit_reply_markup(None)
    await callback.bot.send_message(user, caption=text, reply_markup=kb.inl_how_much)
    

@router.callback_query(F.data == 'how_much')
async def how_much(callback: CallbackQuery):
    user = callback.from_user.id
    
    text = '–ê —Å–µ–π—á–∞—Å —è –ø—Ä–µ–¥–ª–∞–≥–∞—é –í–∞–º –ø–æ—Å–µ—Ç–∏—Ç—å –Ω–∞—à —Å–∞–π—Ç –∏ –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–∞—Ä–∏—Ñ–∞–º–∏ –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏. –û—á–µ–Ω—å –Ω–∞–¥–µ—é—Å—å, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –±—ã–ª–∞ –ø–æ–ª–µ–∑–Ω–æ–π! ü•∞ü§ó‚¨áÔ∏è'
    
    await callback.message.edit_reply_markup(None)
    await callback.bot.send_message(user, text, reply_markup=kb.inl_find_money)
    

### –£ –º–µ–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
@router.message(F.text == '–£ –º–µ–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç...')
async def not_work(message: Message):
    text = '–û—á–µ–Ω—å –∂–∞–ª—å, —á—Ç–æ –í–∞–º –ø—Ä–∏—à–ª–æ—Å—å —Å—Ç–æ–ª–∫–Ω—É—Ç—å—Å—è —Å —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏. –ù–∞–¥–µ—é—Å—å —è —Å–º–æ–≥—É –í–∞–º –ø–æ–º–æ—á—å ü•∫ü§óü©µ\n\n–î–∞–≤–∞–π—Ç–µ —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è! –í –º–µ–Ω—é —Å–Ω–∏–∑—É –≤—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ä–∞–∑–¥–µ–ª. ‚¨áÔ∏è'
    await message.answer(text, reply_markup=kb.not_work)


@router.message(F.text == '–ù–∞–∑–∞–¥')
async def back(message: Message):
    text = '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é'
    await message.answer(text, reply_markup=kb.helper)


### –£ –º–µ–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
@router.message(F.text == '–£ –º–µ–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ')
async def not_work(message: Message):
    cm.upsert_report('dwork_face')
    
    text = '–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –ø–æ–π–¥–µ–º –¥–∞–ª—å—à–µ, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏ –∏ –Ω–∞—à–µ–π –ø–∞–º—è—Ç–∫–æ–π —Å —Å–æ–≤–µ—Ç–∞–º–∏. ü§ó‚¨áÔ∏è\n\n–ù–µ—Å—Ç–∞–±–∏–ª—å–Ω—ã–π –∏–ª–∏ —Å–ª–∞–±—ã–π –∏–Ω—Ç–µ—Ä–Ω–µ—Ç –º–æ–∂–µ—Ç –ø–æ–≤–ª–∏—è—Ç—å –Ω–∞ —Ä–∞–±–æ—Ç—É –¥–æ–º–æ—Ñ–æ–Ω–∞, –ø–æ—Å–∫–æ–ª—å–∫—É –æ–Ω —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä—É–µ—Ç —á–µ—Ä–µ–∑ —Å–µ—Ç—å.\n\n–ß—Ç–æ–±—ã —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –ª–∏—Ü —Ä–∞–±–æ—Ç–∞–ª–∞ –ª—É—á—à–µ, —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º –∑–∞–≥—Ä—É–∑–∏—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Ñ–æ—Ç–æ —Å–¥–µ–ª–∞–Ω–æ –ø—Ä–∏ —Ö–æ—Ä–æ—à–µ–º –æ—Å–≤–µ—â–µ–Ω–∏–∏, –±–µ–∑ –ø–æ–º–µ—Ö –∏ –∞–∫—Å–µ—Å—Å—É–∞—Ä–æ–≤.'
    await message.answer(text, reply_markup=kb.inl_im_read)
    

@router.callback_query(F.data == 'im_read')
async def im_read(callback: CallbackQuery):
    user = callback.from_user.id
    
    text = '–ï—Å–ª–∏ —ç—Ç–∞ –ø–∞–º—è—Ç–∫–∞ –í–∞–º –Ω–µ –ø–æ–¥–æ—à–ª–∞, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –±—ã—Å—Ç—Ä–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –∏ —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É ü§ó\n\n–≠—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤–∞–º –ª–∏—à—å –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤...\n\n–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —è –∑–∞–Ω–æ—à—É –≤ –∑–∞—è–≤–∫—É. ü§ó'
    
    await callback.message.edit_reply_markup(None)
    await callback.bot.send_message(user, text, reply_markup=kb.inl_im_understood)


### –ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
@router.message(F.text == '–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ')
async def dnot_cannot_enter(message: Message):
    cm.upsert_report('cannot_ent')
    
    text = '–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –ø–æ–π–¥–µ–º –¥–∞–ª—å—à–µ, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏ –∏ –Ω–∞—à–µ–π –ø–∞–º—è—Ç–∫–æ–π —Å —Å–æ–≤–µ—Ç–∞–º–∏ ü§ó‚¨áÔ∏è\n1. –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç 1 —Ç—ã–π—ã–Ω–∞, —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–ø–∏—à–µ—Ç –æ–ø–ª–∞—Ç—É –∑–∞ –¥–æ–º–æ—Ñ–æ–Ω.\n\n2. –ù–∞–¥–µ—é—Å—å, —á—Ç–æ –≤—ã –ø—Ä–æ–≤–µ—Ä–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏ –ª–æ–≥–∏–Ω–∞.'
    await message.answer(text, reply_markup=kb.inl_im_read)
    

@router.callback_query(F.data == 'im_read_app')
async def im_read_app(callback: CallbackQuery):
    user = callback.from_user.id
    
    text = '–í–∞–º –Ω—É–∂–Ω–æ –ø–æ–ª—É—á–∏—Ç—å –ø–∞—Ä–æ–ª—å –∏ –ª–æ–≥–∏–Ω –æ—Ç –Ω–∞—à–∏—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –Ω–µ–±–æ–ª—å—à—É—é –∞–Ω–∫–µ—Ç—É, —á—Ç–æ–±—ã –æ–Ω–∏ —Å–º–æ–≥–ª–∏ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è –∏ –≤—ã—Å–ª–∞—Ç—å –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–∞–Ω–Ω—ã–µ.\n\n–≠—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤–∞–º –ª–∏—à—å –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤..–û—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —è –∑–∞–Ω–æ—à—É –≤ –∑–∞—è–≤–∫—É. ü§ó'
    
    await callback.message.edit_reply_markup(None)
    await callback.bot.send_message(user, text, reply_markup=kb.inl_im_understood)


### –ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–º–µ—Ä—ã
@router.message(F.text == '–ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–º–µ—Ä—ã')
async def dnot_work_cameras(message: Message):
    cm.upsert_report('dwork_camera')
    
    text = '‚ÄºÔ∏è –ö–∞–º–µ—Ä—ã –≤–∏–¥–µ–æ–Ω–∞–±–ª—é–¥–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–æ–ª—å–∫–æ –ø–æ —Ç–∞—Ä–∏—Ñ—É "–¥–æ–º–æ—Ñ–æ–Ω 200". –ï—Å–ª–∏ —É –í–∞—Å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç —Ç–∞—Ä–∏—Ñ, –Ω–æ –∫–∞–º–µ—Ä—ã –Ω–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∏–ª–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç, –¥–∞–≤–∞–π—Ç–µ –ø–æ–ø—Ä–æ–±—É–µ–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω–∞—Ö.\n\n–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–º –Ω—É–∂–Ω–æ –∑–∞–ø–æ–ª–Ω–∏—Ç—å –∑–∞—è–≤–∫—É. –≠—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤–∞–º –ª–∏—à—å –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤.. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —è –∑–∞–Ω–æ—à—É –≤ –∑–∞—è–≤–∫—É. ü§ó'
    await message.answer(text, reply_markup=kb.inl_im_understood)
    
    
### –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç
@router.message(F.text == '–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç')
async def dnot_work_app(message: Message):
    cm.upsert_report('dwork_app')
    
    text = '–ü—Ä–µ–∂–¥–µ —á–µ–º –º—ã –ø–æ–π–¥–µ–º –¥–∞–ª—å—à–µ, –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å –≤–æ–∑–º–æ–∂–Ω—ã–º–∏ –ø—Ä–∏—á–∏–Ω–∞–º–∏ –∏ –Ω–∞—à–µ–π –ø–∞–º—è—Ç–∫–æ–π —Å —Å–æ–≤–µ—Ç–∞–º–∏ ü§ó‚¨áÔ∏è\n\n1. –í–∫–ª—é—á–µ–Ω–Ω—ã–π VPN. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ù–ï –†–ê–ë–û–¢–ê–ï–¢ –ø—Ä–∏ –≤–∫–ª—é—á–µ–Ω–Ω–æ–º VPN. –≠—Ç–æ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–∏—á–∏–Ω–æ–π, –ø–æ –∫–æ—Ç–æ—Ä–æ–π –∫ –≤–∞–º –Ω–µ –ø–æ—Å—Ç—É–ø–∞—é—Ç –∑–≤–æ–Ω–∫–∏ –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –ü–æ—ç—Ç–æ–º—É –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ VPN –æ—Ç–∫–ª—é—á–µ–Ω.\n\n2. –ó–∞–ø—Ä–µ—Ç –Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è. –õ—é–±–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç–µ –Ω–∞ —Ç–µ–ª–µ—Ñ–æ–Ω –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–∞–∫–µ—Ç —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–π. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤–∫–ª—é—á–µ–Ω—ã –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –¥–ª—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è Intercom.\n\n3. –ï—Å–ª–∏ —Å–µ–π—á–∞—Å –Ω–∞—á–∞–ª–æ –º–µ—Å—è—Ü–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –Ω–∞ –±–∞–ª–∞–Ω—Å–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤. –î–∞–∂–µ –µ—Å–ª–∏ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç 1 —Ç—ã–π—ã–Ω–∞, —Å–∏—Å—Ç–µ–º–∞ –Ω–µ —Å–ø–∏—à–µ—Ç –æ–ø–ª–∞—Ç—É –∑–∞ –¥–æ–º–æ—Ñ–æ–Ω.'
    await message.answer(text, reply_markup=kb.inl_app_dnot)
    

@router.callback_query(F.data == 'im_app_dnot')
async def im_app_dnot(callback: CallbackQuery):
    user = callback.from_user.id
    
    text = '–ï—Å–ª–∏ —ç—Ç–∞ –ø–∞–º—è—Ç–∫–∞ –í–∞–º –Ω–µ –ø–æ–¥–æ—à–ª–∞, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—ã –±—ã—Å—Ç—Ä–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏ –∑–∞–ø—Ä–æ—Å –∏ —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—É ü§ó\n\n–≠—Ç–æ –Ω–µ –∑–∞–π–º–µ—Ç –º–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏, –≤–∞–º –ª–∏—à—å –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤...\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–π—Ç–µ –æ—Ç–≤–µ—Ç—ã –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å. –í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã —è –∑–∞–Ω–æ—à—É –≤ –∑–∞—è–≤–∫—É.'
    
    await callback.message.edit_reply_markup(None)
    await callback.bot.send_message(user, text, reply_markup=kb.inl_im_understood)
    

### –î—Ä—É–≥–æ–µ
@router.message(F.text == '–î—Ä—É–≥–æ–µ')
async def another(message: Message):
    cm.upsert_report('another')
    
    text = '–ï—Å–ª–∏ –≤–∞–º –Ω–µ –ø–æ–¥–æ—à–µ–ª –Ω–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö —Ä–∞–∑–¥–µ–ª–æ–≤, –≤–∞–º –ø–æ–º–æ–∂–µ—Ç —Ç–æ–ª—å–∫–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç. –î–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –∑–∞—è–≤–∫—É, —á—Ç–æ–±—ã –≤–∞—à –∑–∞–ø—Ä–æ—Å –±—ã—Å—Ç—Ä–µ–µ –æ–±—Ä–∞–±–æ—Ç–∞–ª–∏.\n\n–Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω–∞ –∫–∞–∂–¥—ã–π –≤–æ–ø—Ä–æ—Å –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—á–∞—Ç—å –æ–¥–Ω–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —è –∑–∞–Ω–æ—à—É –≤ –∑–∞—è–≤–∫—É. ü§ó\n\n–ù–∞—á–Ω–µ–º?'
    await message.answer(text, reply_markup=kb.inl_start)
    
    
@router.callback_query(F.data == 'report_w')
async def handle_report(callback: CallbackQuery):
    user = callback.from_user.id
    cm.upsert_user_state(user, 10)

    await callback.answer('–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à –∏–Ω—Ç–µ—Ä–µ—Å.')

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.bot.send_message(user, '–ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?', reply_markup=kb.cancel)


@router.message(lambda message: cm.get_user_state(message.from_user.id)[0] == 10)
async def handle_name(message: Message):
    user = message.from_user.id
    text = message.text

    cm.upsert_ticket(user, 'name', text)
    cm.upsert_user_state(user, 20)

    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –∞–¥—Ä–µ—Å', reply_markup=kb.cancel)


@router.message(lambda message: cm.get_user_state(message.from_user.id)[0] == 20)
async def handle_address(message: Message):
    user = message.from_user.id
    text = message.text
    cm.upsert_ticket(user, 'address', text)
    cm.upsert_user_state(user, 3)

    await message.answer('–ö–∞–∫ —Å –≤–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è?', reply_markup=kb.inl_connection_type)


### Contact type
@router.callback_query(F.data == 'whats')
async def whats(callback: CallbackQuery):
    user = callback.from_user.id
    
    cm.upsert_ticket(user, 'callback_type', '–ù–∞–ø–∏—Å–∞—Ç—å –≤ What\'s App')
    cm.upsert_user_state(user, 50)

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.bot.send_message(user, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', reply_markup=kb.cancel)


@router.callback_query(F.data == 'mobile')
async def whats(callback: CallbackQuery):
    user = callback.from_user.id
    
    cm.upsert_ticket(user, 'callback_type', '–ü–æ–∑–≤–æ–Ω–∏—Ç—å')
    cm.upsert_user_state(user, 50)

    await callback.message.edit_reply_markup(reply_markup=None)
    await callback.bot.send_message(user, '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.', reply_markup=kb.cancel)


@router.message(lambda message: cm.get_user_state(message.from_user.id)[0] == 50)
async def handle_phone(message: Message):
    user = message.from_user.id
    text = message.text
    cm.upsert_ticket(user, 'num', text)
    cm.upsert_user_state(user, 60)

    await message.answer('–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. (–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∏–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Å—Ç–æ–∫–Ω—É–ª–∏—Å—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∞–º –ø–æ–º–æ—á—å)', reply_markup=kb.cancel)


@router.message(lambda message: cm.get_user_state(message.from_user.id)[0] == 60)
async def handle_description(message: Message):
    user = message.from_user.id
    text = message.text
    cm.upsert_ticket(user, 'description', text)
    cm.reset_state(user)

    get_data = cm.get_ticket(user)
    date = message.date.today().strftime("%Y-%m-%d %H:%M")

    await message.bot.send_message(
        -1002009533675,
        f'–û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{message.from_user.username}. –í—Ä–µ–º—è: {date}\
        \n\n–í–æ–ø—Ä–æ—Å: –ö–∞–∫ –í–∞—Å –∑–æ–≤—É—Ç?\n–û—Ç–≤–µ—Ç: {get_data[1]}\
        \n\n–í–æ–ø—Ä–æ—Å: –ü–æ –∫–∞–∫–æ–º—É –∞–¥—Ä–µ—Å—É –≤—ã —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–æ–º–æ—Ñ–æ–Ω, –ª–∏–±–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ —Å–∏—Å—Ç–µ–º–µ —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–≥–æ –¥–æ–º–æ—Ñ–æ–Ω–∞?\n–û—Ç–≤–µ—Ç: {get_data[2]}\
        \n\n–í–æ–ø—Ä–æ—Å: –í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–≤—è–∑–∏\n–û—Ç–≤–µ—Ç: {get_data[3]}\
        \n\n–í–æ–ø—Ä–æ—Å: –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è —Å–≤—è–∑–∏\n–û—Ç–≤–µ—Ç: {get_data[5]}\
        \n\n–í–æ–ø—Ä–æ—Å: –ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏–º–µ—á–∞–Ω–∏–µ - –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π. (–ú–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –∏ –ø–æ–∂–µ–ª–∞–Ω–∏—è, –∏–ª–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç–∏ —Å –∫–æ—Ç–æ—Ä—ã–º–∏ –≤—ã —Å—Ç–æ–∫–Ω—É–ª–∏—Å—å, —á—Ç–æ–±—ã –º—ã –º–æ–≥–ª–∏ –≤–∞–º –ø–æ–º–æ—á—å)\n–û—Ç–≤–µ—Ç: {get_data[4]}'
    )

    await message.answer('–í–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ! –°—Ä–æ–∫–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–∫–∏ - 3 —Ä–∞–±–æ—á–∏—Ö –¥–Ω—è.\n\n\n–°–ª–µ–¥–∏—Ç–µ –∑–∞ –Ω–∞—à–∏–º –∏–Ω—Å—Ç–∞–≥—Ä–∞–º–æ–º, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–µ–π! ü§©üëåüòâü©µ', reply_markup=kb.helper)
    

@router.message(Command('report_about'))
async def report_about(message: Message):
    rep = cm.report_about_report()
    text = f'Start: {rep[0][0]}\n–ö–∞–∫ –ø–æ–¥–∫–ª—é—á–∏—Ç—å —É–º–Ω—ã–π –¥–æ–º–æ—Ñ–æ–Ω?: {rep[0][1]}\n–†–∞—Å—Å–∫–∞–∂–∏, —á—Ç–æ —É–º–µ–µ—Ç —É–º–Ω—ã–π –¥–æ–º–æ—Ñ–æ–Ω: {rep[0][2]}\
             \n–ì–¥–µ –º–æ–∂–Ω–æ –∫—É–ø–∏—Ç—å –Ω–æ–≤—ã–π –∫–ª—é—á?: {rep[0][3]}\n–ö—Ç–æ —Ç–∞–∫–∞—è –°–∏—é?: {rep[0][4]}\n–û –∫–æ–º–ø–∞–Ω–∏–∏: {rep[0][5]}\
             \n–£ –º–µ–Ω—è –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ: {rep[0][6]}\n–ù–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è –≤–æ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {rep[0][7]}\
             \n–ù–µ —Ä–∞–±–æ—Ç–∞—é—Ç –∫–∞–º–µ—Ä—ã: {rep[0][8]}\n–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: {rep[0][9]}\n–î—Ä—É–≥–æ–µ: {rep[0][10]}'
    
    await message.answer(text, reply_markup=kb.helper)